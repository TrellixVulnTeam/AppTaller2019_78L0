VER COMBO, CARRITO, COMPRA

CREATE TABLE "rol" (
	"idRol" serial NOT NULL,
	"nombreRol" character varying (30) NOT NULL,
	Primary Key ("idRol")
);

CREATE TABLE "usuario" (
	"nombre" character varying(30) NOT NULL,
	"contrasenia" character varying (20) NOT NULL, 
	"contacto" character varying (70),
	"rol" smallint NOT NULL,
	Primary Key ("nombre"),
	foreing key ("rol") references "rol" deferrable
);

CREATE TABLE "tipoProducto" (
	"idTipo" serial NOT NULL,
	"nombreTipo" character varying(30) NOT NULL,
	Primary key ("idTipo"),
);

CREATE TABLE "marca" (
	"idMarca" serial NOT NULL,
	"nombre" character varying(30) NOT NULL,
	Primary key ("idMarca")
);

CREATE TABLE "producto" (
	"id" serial NOT NULL,
	"nombre" character varying (30) NOT NULL,
	"descripcion" character varying (150) NOT NULL,
	"precio" float NOT NULL,
	"modelo" character varying (30),
	"garantia" smallint,
	"tipoProducto" smallint,
	"marca" smallint,
	Primary key ("id"),
	foreign key ("tipoProducto") references "tipoProducto" deferrable
	foreign key ("marca") references "marca" deferrable
);

CREATE TABLE "ejemplar" (
	"numeroSerie" character varying(50) NOT NULL,
	"vendido" boolean NOT NULL,
	"producto" smallint NOT NULL,
	Primary key ("numeroSerie"),
	foreign key ("producto") references "producto" deferrable
);

CREATE TABLE "combo" (
	"id" serial NOT NULL,
	"nombre" character varying (50),
	"total" float,
	"descuento" float,
	Primary key ("id")
);

CREATE TABLE "ejemplar_combo" (
	"idCombo" smallint NOT NULL
	"numeroSerie" character varying(50) NOT NULL,
	foreing key ("idCombo") references "combo" deferrable,
	foreing key ("numeroSerie") references "ejemplar" deferrable
);

CREATE TABLE "carrito" (
	"id" serial NOT NULL,
	"total" float,
	Primary key ("id")
);

CREATE TABLE "ejemplar_carrito" (
	"idCarrito" integer NOT NULL,
	"numeroSerie" character varying(50) NOT NULL,
	foreing key ("idCarrito") references "carrito" deferrable,
	foreing key ("numeroSerie") references "ejemplar" deferrable
);

CREATE TABLE "compra" (
	"id" serial NOT NULL,
	"idCarrito" integer NOT NULL,
	"montoCompra" float NOT NULL, 
	"estadoConfiracion" boolean,
	Primary key ("id"),
	foreign key "idCarrito" references "carrito" deferrable
);

CREATE TABLE "pago" (
	"id" serial NOT NULL,
	"idCompra" integer NOT NULL,
	"total" double NOT NULL,
	"estado" boolean,
	"tarjeta" character varying (50),
	"cuotas" integer,
	Primary key ("id"),
	foreign key "idCompra" references "compra" deferrable
);


---TRIGGERS
---La contraseña de usuario no puede tener menos de 5 caracteres de longitud ni más de 20.
CREATE OR REPLACE FUNCTION nuevaContrasenia()
RETURNS trigger AS $verificarContrasenia$
BEGIN
IF (char_length(NEW.contrasenia)<5) THEN
RAISE EXCEPTION 'La contraseña es muy corta, debe superar los 5 caracteres ';
rollback transaction;
ELSE
IF (20 < char_length(NEW.contrasenia)) THEN
RAISE EXCEPTION 'La contraseña es muy larga, no debe superar los 20 caracteres ';
rollback transaction;
ELSE 
RETURN NEW;
END IF;
END IF; 
END;
$verificarContrasenia$ 
LANGUAGE plpgsql;

CREATE TRIGGER verificarContrasenia
BEFORE INSERT ON "usuario"
FOR EACH ROW
EXECUTE PROCEDURE nuevaContrasenia();


--- El precio del producto no puede ser menor o igual a cero
CREATE OR REPLACE FUNCTION cargandoPrecio()
RETURNS trigger AS
$cargarPrecio$
BEGIN
IF (NEW.precio <=0) THEN
RAISE EXCEPTION 'Precio no válido ';
rollback transaction;
ELSE
RETURN NEW;
END IF;
END;
$cargarPrecio$
LANGUAGE plpgsql;

CREATE TRIGGER cargarPrecio
BEFORE INSERT ON "producto"
FOR EACH ROW
EXECUTE PROCEDURE cargandoPrecio();


--- El total del combo no puede ser menor o igual a cero
CREATE OR REPLACE FUNCTION cargandoTotal()
RETURNS trigger AS
$cargarTotal$
BEGIN
IF (NEW.total <=0) THEN
RAISE EXCEPTION 'Total no válido ';
rollback transaction;
ELSE
RETURN NEW;
END IF;
END;
$cargarTotal$
LANGUAGE plpgsql;

CREATE TRIGGER cargarTotal
BEFORE INSERT ON "combo"
FOR EACH ROW
EXECUTE PROCEDURE cargandoTotal();

---El nombre del rol no puede tener más de 30 caracteres de longitud.
CREATE OR REPLACE FUNCTION cargandoNombreRol()
RETURNS trigger AS $cargarNombreRol$
BEGIN
IF (30 < char_length(NEW.nombreRol)) THEN
RAISE EXCEPTION 'El nombre es muy largo, no debe superar los 30 caracteres ';
rollback transaction;
ELSE 
RETURN NEW;
END IF;
END IF; 
END;
$cargarNombreRol$ 
LANGUAGE plpgsql;

CREATE TRIGGER cargarNombreRol
BEFORE INSERT ON "rol"
FOR EACH ROW
EXECUTE PROCEDURE cargandoNombreRol();

---El nombre del usuario no puede tener más de 30 caracteres de longitud.
CREATE OR REPLACE FUNCTION cargandoNombre()
RETURNS trigger AS $cargarNombre$
BEGIN
IF (30 < char_length(NEW.nombre)) THEN
RAISE EXCEPTION 'El nombre es muy largo, no debe superar los 30 caracteres ';
rollback transaction;
ELSE 
RETURN NEW;
END IF;
END IF; 
END;
$cargarNombre$ 
LANGUAGE plpgsql;

CREATE TRIGGER cargarNombre
BEFORE INSERT ON "usuario"
FOR EACH ROW
EXECUTE PROCEDURE cargandoNombre();


---El nombre del tipo de producto no puede tener más de 30 caracteres de longitud.
CREATE OR REPLACE FUNCTION cargandoNombreTipo()
RETURNS trigger AS $cargarNombreTipo$
BEGIN
IF (30 < char_length(NEW.nombreTipo)) THEN
RAISE EXCEPTION 'El nombre del tipo es muy largo, no debe superar los 30 caracteres ';
rollback transaction;
ELSE 
RETURN NEW;
END IF;
END IF; 
END;
$cargarNombreTipo$ 
LANGUAGE plpgsql;

CREATE TRIGGER cargarNombreTipo
BEFORE INSERT ON "tipoProducto"
FOR EACH ROW
EXECUTE PROCEDURE cargandoNombreTipo();


---El nombre del producto no puede tener más de 30 caracteres de longitud.
CREATE OR REPLACE FUNCTION cargandoNombreProducto()
RETURNS trigger AS $cargarNombreProducto$
BEGIN
IF (30 < char_length(NEW.nombre)) THEN
RAISE EXCEPTION 'El nombre es muy largo, no debe superar los 30 caracteres ';
rollback transaction;
ELSE 
RETURN NEW;
END IF;
END IF; 
END;
$cargarNombreProducto$ 
LANGUAGE plpgsql;

CREATE TRIGGER cargarNombreProducto
BEFORE INSERT ON "producto"
FOR EACH ROW
EXECUTE PROCEDURE cargandoNombreProducto();


---El nombre del rol no puede tener más de 50 caracteres de longitud.
CREATE OR REPLACE FUNCTION cargandoNombreCombo()
RETURNS trigger AS $cargarNombreCombo$
BEGIN
IF (30 < char_length(NEW.nombre)) THEN
RAISE EXCEPTION 'El nombre es muy largo, no debe superar los 50 caracteres ';
rollback transaction;
ELSE 
RETURN NEW;
END IF;
END IF; 
END;
$cargarNombreCombo$ 
LANGUAGE plpgsql;

CREATE TRIGGER cargarNombreCombo
BEFORE INSERT ON "combo"
FOR EACH ROW
EXECUTE PROCEDURE cargandoNombreCombo();